//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.33440
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("MulticopterSimulation")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("MulticopterSimulation")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="MulticopterSimulation.Y2013.M05, Version=1.0.0.0, Culture=neutral, PublicKeyToken" +
    "=9bf489a6a7adbcdd")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace MulticopterSimulation.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://simulator.archaeocopter.de/2013/05/multicoptersimulation.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://simulator.archaeocopter.de/2013/05/multicoptersimulation.html", ElementName="MulticopterSimulationState")]
    public class MulticopterSimulationState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MulticopterSimulationState() {
        }
        
        private int _WindowControlX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowControlX {
            get {
                return this._WindowControlX;
            }
            set {
                this._WindowControlX = value;
            }
        }
        
        private int _WindowControlY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowControlY {
            get {
                return this._WindowControlY;
            }
            set {
                this._WindowControlY = value;
            }
        }
        
        private int _WindowSimulationSettingsX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowSimulationSettingsX {
            get {
                return this._WindowSimulationSettingsX;
            }
            set {
                this._WindowSimulationSettingsX = value;
            }
        }
        
        private int _WindowSimulationSettingsY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowSimulationSettingsY {
            get {
                return this._WindowSimulationSettingsY;
            }
            set {
                this._WindowSimulationSettingsY = value;
            }
        }
        
        private int _WindowStatisticsX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowStatisticsX {
            get {
                return this._WindowStatisticsX;
            }
            set {
                this._WindowStatisticsX = value;
            }
        }
        
        private int _WindowStatisticsY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowStatisticsY {
            get {
                return this._WindowStatisticsY;
            }
            set {
                this._WindowStatisticsY = value;
            }
        }
        
        private int _WindowPIDTuningX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowPIDTuningX {
            get {
                return this._WindowPIDTuningX;
            }
            set {
                this._WindowPIDTuningX = value;
            }
        }
        
        private int _WindowPIDTuningY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowPIDTuningY {
            get {
                return this._WindowPIDTuningY;
            }
            set {
                this._WindowPIDTuningY = value;
            }
        }
        
        private float _AttitudeP;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float AttitudeP {
            get {
                return this._AttitudeP;
            }
            set {
                this._AttitudeP = value;
            }
        }
        
        private float _AttitudeI;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float AttitudeI {
            get {
                return this._AttitudeI;
            }
            set {
                this._AttitudeI = value;
            }
        }
        
        private float _AttitudeD;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float AttitudeD {
            get {
                return this._AttitudeD;
            }
            set {
                this._AttitudeD = value;
            }
        }
        
        private float _AltitudeP;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float AltitudeP {
            get {
                return this._AltitudeP;
            }
            set {
                this._AltitudeP = value;
            }
        }
        
        private float _AltitudeI;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float AltitudeI {
            get {
                return this._AltitudeI;
            }
            set {
                this._AltitudeI = value;
            }
        }
        
        private float _AltitudeD;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float AltitudeD {
            get {
                return this._AltitudeD;
            }
            set {
                this._AltitudeD = value;
            }
        }
        
        private float _PositionP;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float PositionP {
            get {
                return this._PositionP;
            }
            set {
                this._PositionP = value;
            }
        }
        
        private float _PositionI;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float PositionI {
            get {
                return this._PositionI;
            }
            set {
                this._PositionI = value;
            }
        }
        
        private float _PositionD;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float PositionD {
            get {
                return this._PositionD;
            }
            set {
                this._PositionD = value;
            }
        }
        
        private bool _WindSimulationActivated;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool WindSimulationActivated {
            get {
                return this._WindSimulationActivated;
            }
            set {
                this._WindSimulationActivated = value;
            }
        }
        
        private float _WindDirection;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float WindDirection {
            get {
                return this._WindDirection;
            }
            set {
                this._WindDirection = value;
            }
        }
        
        private float _WindIntensity;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float WindIntensity {
            get {
                return this._WindIntensity;
            }
            set {
                this._WindIntensity = value;
            }
        }
        
        private float _WindDirectionFluctuation;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float WindDirectionFluctuation {
            get {
                return this._WindDirectionFluctuation;
            }
            set {
                this._WindDirectionFluctuation = value;
            }
        }
        
        private float _WindIntensityFluctuation;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float WindIntensityFluctuation {
            get {
                return this._WindIntensityFluctuation;
            }
            set {
                this._WindIntensityFluctuation = value;
            }
        }
        
        private float _YScale;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float YScale {
            get {
                return this._YScale;
            }
            set {
                this._YScale = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current MulticopterSimulationState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::MulticopterSimulation.Proxy.MulticopterSimulationState typedTarget = ((global::MulticopterSimulation.Proxy.MulticopterSimulationState)(target));
            typedTarget._WindowControlX = this._WindowControlX;
            typedTarget._WindowControlY = this._WindowControlY;
            typedTarget._WindowSimulationSettingsX = this._WindowSimulationSettingsX;
            typedTarget._WindowSimulationSettingsY = this._WindowSimulationSettingsY;
            typedTarget._WindowStatisticsX = this._WindowStatisticsX;
            typedTarget._WindowStatisticsY = this._WindowStatisticsY;
            typedTarget._WindowPIDTuningX = this._WindowPIDTuningX;
            typedTarget._WindowPIDTuningY = this._WindowPIDTuningY;
            typedTarget._AttitudeP = this._AttitudeP;
            typedTarget._AttitudeI = this._AttitudeI;
            typedTarget._AttitudeD = this._AttitudeD;
            typedTarget._AltitudeP = this._AltitudeP;
            typedTarget._AltitudeI = this._AltitudeI;
            typedTarget._AltitudeD = this._AltitudeD;
            typedTarget._PositionP = this._PositionP;
            typedTarget._PositionI = this._PositionI;
            typedTarget._PositionD = this._PositionD;
            typedTarget._WindSimulationActivated = this._WindSimulationActivated;
            typedTarget._WindDirection = this._WindDirection;
            typedTarget._WindIntensity = this._WindIntensity;
            typedTarget._WindDirectionFluctuation = this._WindDirectionFluctuation;
            typedTarget._WindIntensityFluctuation = this._WindIntensityFluctuation;
            typedTarget._YScale = this._YScale;
        }
        
        /// <summary>
        ///Clones MulticopterSimulationState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::MulticopterSimulation.Proxy.MulticopterSimulationState target0 = new global::MulticopterSimulation.Proxy.MulticopterSimulationState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MulticopterSimulationState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._WindowControlX);
            writer.Write(this._WindowControlY);
            writer.Write(this._WindowSimulationSettingsX);
            writer.Write(this._WindowSimulationSettingsY);
            writer.Write(this._WindowStatisticsX);
            writer.Write(this._WindowStatisticsY);
            writer.Write(this._WindowPIDTuningX);
            writer.Write(this._WindowPIDTuningY);
            writer.Write(this._AttitudeP);
            writer.Write(this._AttitudeI);
            writer.Write(this._AttitudeD);
            writer.Write(this._AltitudeP);
            writer.Write(this._AltitudeI);
            writer.Write(this._AltitudeD);
            writer.Write(this._PositionP);
            writer.Write(this._PositionI);
            writer.Write(this._PositionD);
            writer.Write(this._WindSimulationActivated);
            writer.Write(this._WindDirection);
            writer.Write(this._WindIntensity);
            writer.Write(this._WindDirectionFluctuation);
            writer.Write(this._WindIntensityFluctuation);
            writer.Write(this._YScale);
        }
        
        /// <summary>
        ///Deserializes MulticopterSimulationState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MulticopterSimulationState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._WindowControlX = reader.ReadInt32();
            this._WindowControlY = reader.ReadInt32();
            this._WindowSimulationSettingsX = reader.ReadInt32();
            this._WindowSimulationSettingsY = reader.ReadInt32();
            this._WindowStatisticsX = reader.ReadInt32();
            this._WindowStatisticsY = reader.ReadInt32();
            this._WindowPIDTuningX = reader.ReadInt32();
            this._WindowPIDTuningY = reader.ReadInt32();
            this._AttitudeP = reader.ReadSingle();
            this._AttitudeI = reader.ReadSingle();
            this._AttitudeD = reader.ReadSingle();
            this._AltitudeP = reader.ReadSingle();
            this._AltitudeI = reader.ReadSingle();
            this._AltitudeD = reader.ReadSingle();
            this._PositionP = reader.ReadSingle();
            this._PositionI = reader.ReadSingle();
            this._PositionD = reader.ReadSingle();
            this._WindSimulationActivated = reader.ReadBoolean();
            this._WindDirection = reader.ReadSingle();
            this._WindIntensity = reader.ReadSingle();
            this._WindDirectionFluctuation = reader.ReadSingle();
            this._WindIntensityFluctuation = reader.ReadSingle();
            this._YScale = reader.ReadSingle();
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::MulticopterSimulation.Proxy.MulticopterSimulationState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::MulticopterSimulation.Proxy.MulticopterSimulationState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class MulticopterSimulationOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: MulticopterSimulation.Proxy.Get, global:: MulticopterSimulation.Proxy.Subscribe> {
        
        public MulticopterSimulationOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::MulticopterSimulation.Proxy.MulticopterSimulationState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::MulticopterSimulation.Proxy.Get operation = new global::MulticopterSimulation.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::MulticopterSimulation.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::MulticopterSimulation.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::MulticopterSimulation.Proxy.MulticopterSimulationState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::MulticopterSimulation.Proxy.Get operation = new global::MulticopterSimulation.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::MulticopterSimulation.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::MulticopterSimulation.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::MulticopterSimulation.Proxy.Subscribe operation = new global::MulticopterSimulation.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::MulticopterSimulation.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::MulticopterSimulation.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::MulticopterSimulation.Proxy.Subscribe operation = new global::MulticopterSimulation.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::MulticopterSimulation.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::MulticopterSimulation.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Service providing a simulation environment for multicopters")]
    [global::System.ComponentModel.DisplayNameAttribute("Multicopter Simulation")]
    public class Contract {
        
        public const string Identifier = "http://simulator.archaeocopter.de/2013/05/multicoptersimulation.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://simulator.archaeocopter.de/2013/05/multicoptersimulation.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://simulator.archaeocopter.de/2013/05/multicoptersimulation.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.MulticopterSimulationOperations = new global::MulticopterSimulation.Proxy.MulticopterSimulationOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.MulticopterSimulationOperations, "http://simulator.archaeocopter.de/2013/05/multicoptersimulation.html", "MulticopterSimulationOperations", ""));
        }
        
        public global::MulticopterSimulation.Proxy.MulticopterSimulationOperations MulticopterSimulationOperations;
    }
}
