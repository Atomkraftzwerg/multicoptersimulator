//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.33440
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("MulticopterSimulation")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("MulticopterSimulation")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="MulticopterSimulation.Y2013.M05, Version=1.0.0.0, Culture=neutral, PublicKeyToken" +
    "=9bf489a6a7adbcdd")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformMulticopterSimulation {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::MulticopterSimulation.Proxy.MulticopterSimulationState), new global::Microsoft.Dss.Core.Attributes.Transform(MulticopterSimulation_Proxy_MulticopterSimulationState_TO_MulticopterSimulation_MulticopterSimulationState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::MulticopterSimulation.MulticopterSimulationState), new global::Microsoft.Dss.Core.Attributes.Transform(MulticopterSimulation_MulticopterSimulationState_TO_MulticopterSimulation_Proxy_MulticopterSimulationState));
        }
        
        public static object MulticopterSimulation_Proxy_MulticopterSimulationState_TO_MulticopterSimulation_MulticopterSimulationState(object transformFrom) {
            global::MulticopterSimulation.MulticopterSimulationState target = new global::MulticopterSimulation.MulticopterSimulationState();
            global::MulticopterSimulation.Proxy.MulticopterSimulationState from = ((global::MulticopterSimulation.Proxy.MulticopterSimulationState)(transformFrom));
            target.WindowControlX = from.WindowControlX;
            target.WindowControlY = from.WindowControlY;
            target.WindowSimulationSettingsX = from.WindowSimulationSettingsX;
            target.WindowSimulationSettingsY = from.WindowSimulationSettingsY;
            target.WindowStatisticsX = from.WindowStatisticsX;
            target.WindowStatisticsY = from.WindowStatisticsY;
            target.WindowPIDTuningX = from.WindowPIDTuningX;
            target.WindowPIDTuningY = from.WindowPIDTuningY;
            target.AttitudeP = from.AttitudeP;
            target.AttitudeI = from.AttitudeI;
            target.AttitudeD = from.AttitudeD;
            target.AltitudeP = from.AltitudeP;
            target.AltitudeI = from.AltitudeI;
            target.AltitudeD = from.AltitudeD;
            target.PositionP = from.PositionP;
            target.PositionI = from.PositionI;
            target.PositionD = from.PositionD;
            target.WindSimulationActivated = from.WindSimulationActivated;
            target.WindDirection = from.WindDirection;
            target.WindIntensity = from.WindIntensity;
            target.WindDirectionFluctuation = from.WindDirectionFluctuation;
            target.WindIntensityFluctuation = from.WindIntensityFluctuation;
            target.YScale = from.YScale;
            return target;
        }
        
        public static object MulticopterSimulation_MulticopterSimulationState_TO_MulticopterSimulation_Proxy_MulticopterSimulationState(object transformFrom) {
            global::MulticopterSimulation.Proxy.MulticopterSimulationState target = new global::MulticopterSimulation.Proxy.MulticopterSimulationState();
            global::MulticopterSimulation.MulticopterSimulationState from = ((global::MulticopterSimulation.MulticopterSimulationState)(transformFrom));
            target.WindowControlX = from.WindowControlX;
            target.WindowControlY = from.WindowControlY;
            target.WindowSimulationSettingsX = from.WindowSimulationSettingsX;
            target.WindowSimulationSettingsY = from.WindowSimulationSettingsY;
            target.WindowStatisticsX = from.WindowStatisticsX;
            target.WindowStatisticsY = from.WindowStatisticsY;
            target.WindowPIDTuningX = from.WindowPIDTuningX;
            target.WindowPIDTuningY = from.WindowPIDTuningY;
            target.AttitudeP = from.AttitudeP;
            target.AttitudeI = from.AttitudeI;
            target.AttitudeD = from.AttitudeD;
            target.AltitudeP = from.AltitudeP;
            target.AltitudeI = from.AltitudeI;
            target.AltitudeD = from.AltitudeD;
            target.PositionP = from.PositionP;
            target.PositionI = from.PositionI;
            target.PositionD = from.PositionD;
            target.WindSimulationActivated = from.WindSimulationActivated;
            target.WindDirection = from.WindDirection;
            target.WindIntensity = from.WindIntensity;
            target.WindDirectionFluctuation = from.WindDirectionFluctuation;
            target.WindIntensityFluctuation = from.WindIntensityFluctuation;
            target.YScale = from.YScale;
            return target;
        }
    }
}
